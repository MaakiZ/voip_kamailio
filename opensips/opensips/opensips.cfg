#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=4
log_stderror=no
log_facility=LOG_LOCAL0

children=4

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


listen=udp:PRESENCE_IP:5065   # CUSTOMIZE ME



####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules"

loadmodule "db_mysql.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "mi_fifo.so"
loadmodule "sipmsgops.so"
loadmodule "uri.so"
loadmodule "acc.so"
loadmodule "xcap.so"
/* uncomment next lines for MySQL based authentication support 
   NOTE: a DB (like db_mysql) module must be also loaded */
loadmodule "auth.so"
loadmodule "auth_db.so"
/* uncomment next line for aliases support
   NOTE: a DB (like db_mysql) module must be also loaded */
#loadmodule "alias_db.so"
/* uncomment next line for multi-domain support
   NOTE: a DB (like db_mysql) module must be also loaded
   NOTE: be sure and enable multi-domain support in all used modules
         (see "multi-module params" section ) */
#loadmodule "domain.so"
/* uncomment the next two lines for presence server support
   NOTE: a DB (like db_mysql) module must be also loaded */
loadmodule "presence.so"
loadmodule "presence_xml.so"
loadmodule "proto_udp.so"




modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")


modparam("rr", "append_fromtag", 0)



modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
#modparam("registrar", "method_filtering", 1)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)



modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url",	"mysql://opensips:opensipsrw@localhost/opensips")


modparam("uri", "use_uri_table", 0)


#### ACCounting module

/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url",	"mysql://opensips:opensipsrw@localhost/opensips")

modparam("presence", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")

modparam("xcap", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")

modparam("presence_xml", "force_active", 1)

modparam("presence", "server_address", "sip:PRESENCE_IP:5065")

modparam("presence", "presentity_table", "presentity")

modparam("presence", "db_update_period", 100)

####### Routing Logic ########

# main request routing logic

route{
	if (!mf_process_maxfwd_header("10")) {
		send_reply("483","Too Many Hops");
		exit;
	}
	if (is_method("PUBLISH")){
		route(2);
	}
	if (is_method("SUBSCRIBE")){
		route(2);
	}
	route(1);
}

route[1] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("2");
		t_on_reply("2");
		t_on_failure("1");
	}

	if (!t_relay()) {
		sl_reply_error();
	};
	exit;
}


# Presence route
/* uncomment the whole following route for enabling presence
   NOTE: do not forget to enable the call of this route from the main
     route */
##route[2]
##{
##	if (!t_newtran())
##	{
##		sl_reply_error();
##		exit;
##	};
##
##	if(is_method("PUBLISH"))
##	{
##		handle_publish();
##		t_release();
##	}
##	else
##	if( is_method("SUBSCRIBE"))
##	{
##		handle_subscribe();
##		t_release();
##	}
##
##	exit;
##}
route[2]
{
	if (!t_newtran())
	{
		sl_reply_error();
		exit;
	};

	if(is_method("PUBLISH"))
	{
		handle_publish();
		#t_release();
	}
	else
	if( is_method("SUBSCRIBE"))
	{
		handle_subscribe();
		#t_release();
	}
exit;
}

branch_route[2] {
	xlog("new branch at $ru\n");
}


onreply_route[2] {
	xlog("incoming reply\n");
}


failure_route[1] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

	# uncomment the following lines if you want to redirect the failed 
	# calls to a different new destination
	##if (t_check_status("486|408")) {
	##	sethostport("192.168.2.100:5060");
	##	# do not set the missed call flag again
	##	t_relay();
	##}
}
